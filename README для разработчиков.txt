Этот текстовый документ предназначен для будущих разработчиков, чтобы они смогли быстрее разобраться в том, как тут всё работает. Осторножно, много букв!

0. Если у вас есть время и силы - переделайте хотя бы четверть проекта. Тут всё сделано через одно место, а у меня было всего 10 дней + учёба. Поверьте, я постарался сделать код таким, чтобы при наличии времени вы согли переписать код и исправить, сделав всё на 100% адекватно.

1. Ну, вы попали. С кодом тут беда, с багами тоже. Одна из главных причин - неправильная инициализация и расположение объектов, плюс неправильно сделанные анимации. Тот, кто это начал явно не понимал в юнити, даже гайд не потрудился дочитать. Однако, не всё потеряно. Проект +-, но в порядок приведён.

2. Комментарии написал, класс с сокетом работает исправно. Часть классов в соответствуюших папках нужны чисто для того, чтобы парсить json'ы. ИХ НЕ ТРОГАТЬ (я их особым образом пометил). Сам класс SocketNetwork содержит в себе делегаты и обработчики событий. И в огромном свитче с определением типа ответа от сервера он содержит не только то, что аозвращает ответ, он содержит тот код, который выполняется при получении именно такого ответа. То есть все запросы основаны на том, что мы из клиентского кода говорим, какой запрос отправить и внутри сокета уже думаем, что делать с ответом.

3. Сама игра управляется тремя с половиной классами, каждый объект единственный и содержит в себе указатели на другие (вспомните мем, где 3 человека паука. Тоже самое). Да, можно было всё в один класс запихать, но тут сделано так. Это классы Room, RoomRow, Table, GameCard. Подробнее о назначениях каждого класса смотрите в комментариях над их объявлением.

π. Данные классы почти полностью облеплены Debug.Log("..."); Отслеживание ошибок особенно важно именно в этих частях кода.

4. Сервер на момент написания этого текста ещё не совсем верно работает и не присылает то, что должен или присылает какой-то бред. Будьте внимательнее, на сервере проблем и ошибок не меньше. Если ошибка при разных тестах каждый раз новая и то не работает одна часть, то другая - чаще всего это не сторона клиента.

5. GameCard - игровая карта. Она является и объектом на сцене и одновременно математическим объектом. Пока ещё GameCard и CardMath не до конца отделены, но характеристики именно как игрвой единицы вынесены в математику.

6. Масть передаётся через символ масти в юникоде. Это уже не изменить. Аккуратнее с кодировками, в vs прям насильно сохраняйте в UTF-8

7. Моя почта: tankoman228@gmail.com . Спрашивайте, если что.

А теперь, как эта штука работает на практике:

- После того, как вы залогинитесь, создаётся токен. Без него на сервер нельзя отправлять другие запросы.

- Информация о соединении и весь интерфейс взаимодействия с сервером перенесён в класс сокета и немного в класс сессии.

- После того, как вы зашли в игру, создаётся комната. На фронте она делается из префаба (да, это не сцена, это префаб). В префабе нарушены слои, но фону и столу уже после инициализации задаётся фон как фон камеры.

- Сервер отправляет клиенту карты. Они создаются и анимированно попадают в руки к вам и к вашему сопернику.

- Сервер отправляет вам кнопку, на которую вы можете нажать (пасс, к примеру). Вы можете отправить карту на сам сервак, скинув её. Она уничтожится, отправившись на сервер, который разошлёт всем игрокам её на стол. На столе карты спавнятся отдельно.
